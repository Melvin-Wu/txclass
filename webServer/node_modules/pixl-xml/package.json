{
  "name": "pixl-xml",
  "version": "1.0.3",
  "description": "A simple module for parsing and composing XML.",
  "author": {
    "name": "Joseph Huckaby",
    "email": "jhuckaby@gmail.com"
  },
  "homepage": "https://github.com/jhuckaby/pixl-xml",
  "license": "MIT",
  "main": "xml.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/jhuckaby/pixl-xml"
  },
  "bugs": {
    "url": "https://github.com/jhuckaby/pixl-xml/issues"
  },
  "keywords": [
    "xml"
  ],
  "dependencies": {},
  "devDependencies": {},
  "readme": "# Overview\n\nThis module provides a lightweight, fast, easy-to-use XML parser which generates a simplified object / array tree.  This can be very useful for parsing XML configuration files and the like.  It is 100% pure JavaScript and has no dependencies.\n\n* Pure JavaScript, no dependencies\n* Very fast parser (About 6X faster than [xml2js](https://www.npmjs.com/package/xml2js))\n* Low memory usage (About 60% less than [xml2js](https://www.npmjs.com/package/xml2js))\n* Fully synchronous operation, no callbacks\n* Can parse XML strings, Buffers or load from files\n* Can preserve or flatten attributes\n* Can convert all keys to lower-case\n* Can serialize objects back to pretty-printed XML\n\n# Usage\n\nUse [npm](https://www.npmjs.com/) to install the module:\n\n```\n\tnpm install pixl-xml\n```\n\nThen use `require()` to load it in your code:\n\n```javascript\n\tvar XML = require('pixl-xml');\n```\n\nParse some XML by passing a string to `XML.parse()`:\n\n```javascript\n\tvar xml_string = '<?xml version=\"1.0\"?><Document>' + \n\t\t'<Simple>Hello</Simple>' + \n\t\t'<Node Key=\"Value\">Complex</Node>' + \n\t\t'</Document>';\n\t\n\tvar doc = XML.parse( xml_string );\n\tconsole.log( doc );\n```\n\nThat would produce an object like the following:\n\n```javascript\n\t{\n\t  \"Simple\": \"Hello\",\n\t  \"Node\": {\n\t    \"Key\": \"Value\",\n\t    \"_Data\": \"Complex\"\n\t  }\n\t}\n```\n\nNote that the outermost element is omitted from the object (`<Document>` in this case).  Also, for complex elements that have both attributes (or sub-elements) *and* plain data, the plain data goes into a `_Data` property.  Multiple elements with the same name at the same level are converted to an array.\n\nYou can also pass in a path to an XML file on disk, and it'll be loaded, then parsed:\n\n```javascript\n\tvar config = XML.parse( 'conf/config.xml' );\n\tconsole.log( config );\n```\n\nParsing errors will be thrown as exceptions, so you'd better wrap `parse()` calls in a try/catch for safety:\n\n```javascript\n\tvar doc = null;\n\ttry {\n\t\tdoc = XML.parse( 'my_xml_file.xml' );\n\t}\n\tcatch (err) {\n\t\tconsole.log(\"XML Parser Error: \" + err);\n\t}\n\tconsole.log( doc );\n```\n\n## Options\n\nYou can pass an optional 2nd argument to `parse()`, which can be an object containing any of the following properties:\n\n### preserveAttributes\n\nThis optional property, when set to `true`, will cause all XML attributes to be kept separate in their own sub-object called `_Attribs` for each element.  For example, consider this snippet:\n\n```javascript\n\tvar xml_string = '<?xml version=\"1.0\"?><Document>' + \n\t\t'<Simple>Hello</Simple>' + \n\t\t'<Node Key=\"Value\">Complex</Node>' + \n\t\t'</Document>';\n\t\n\tvar doc = XML.parse( xml_string, { preserveAttributes: true } );\n\tconsole.log( doc );\n```\n\nWith the `preserveAttributes` flag set to true, this would produce the following object:\n\n```javascript\n\t{\n\t  \"Simple\": \"Hello\",\n\t  \"Node\": {\n\t    \"_Attribs\": {\n\t      \"Key\": \"Value\"\n\t    },\n\t    \"_Data\": \"Content\"\n\t  }\n\t}\n```\n\nNotice the `Key` attribute of the `<Node>` element is now kept in an `_Attribs` sub-object.  The only real purpose for this is if you expect to write the XML back out again (see [Composing XML](#composing-xml) below).\n\n### lowerCase\n\nThis optional property, when set to `true`, will cause all keys to be lower-cased as the XML is parsed.  This affects both elements and attributes.  Example:\n\n```javascript\n\tvar xml_string = '<?xml version=\"1.0\"?><Document>' + \n\t\t'<Simple>Hello</Simple>' + \n\t\t'<Node Key=\"Value\">Complex</Node>' + \n\t\t'</Document>';\n\t\n\tvar doc = XML.parse( xml_string, { lowerCase: true } );\n\tconsole.log( doc );\n```\n\nWith the `lowerCase` flag set to true, this would produce the following object:\n\n```javascript\n\t{\n\t  \"simple\": \"Hello\",\n\t  \"node\": {\n\t    \"key\": \"Value\",\n\t    \"_data\": \"Content\"\n\t  }\n\t}\n```\n\nNote that the values themselves are not touched -- only the keys are lower-cased.\n\n## Composing XML\n\nTo compose XML back to a string, call `XML.stringify()` and pass in your pre-parsed XML object, and an outer wrapper element name.  It helps to parse using the [preserveAttributes](#preserveattributes) option for this, as it will honor the `_Attribs` sub-objects and convert them back into real XML attributes.  Example:\n\n```javascript\n\tvar xml_string = XML.stringify( doc, 'Document' );\n\tconsole.log( xml_string );\n```\n\nThis would produce something like:\n\n```xml\n\t<?xml version=\"1.0\"?>\n\t<Document>\n\t\t<Node Key=\"Value\">Content</Node>\n\t\t<Simple>Hello</Simple>\n\t</Document>\n```\n\nNote that elements and attributes may lose their original ordering, as hashes have an undefined key order.  However, to keep things consistent, they are both alphabetically sorted when serialized.\n\n## Utility Functions\n\nHere are a few utility functions you can use:\n\n### encodeEntities\n\n```\n\tSTRING encodeEntities( STRING )\n```\n\nThis function will take a string, and encode the three standard XML entities, ampersand (`&`), left-angle-bracket (`<`) and right-angle-bracket (`>`), into their XML-safe counterparts.  It returns the result.  Example:\n\n```javascript\n\tvar text = '<Hello>&<There>';\n\tconsole.log( XML.encodeEntities(text) );\n\t// Would output: &lt;Hello&gt;&amp;&lt;There&gt;\n```\n\n### encodeAttribEntities\n\n```\n\tSTRING encodeAttribEntities( STRING )\n```\n\nThis function does basically the same thing as [encodeEntities](#encodeentities), but it also includes encoding for single-quotes (`'`) and double-quotes (`\"`).  It is used for encoding an XML string for composing into an attribute value.  It returns the result.  Example:\n\n```javascript\n\tvar text = '<Hello>\"&\"<There>';\n\tconsole.log( XML.encodeAttribEntities(text) );\n\t// Would output: &lt;Hello&gt;&quot;&amp;&quot;&lt;There&gt;\n```\n\n### decodeEntities\n\n```\n\tSTRING decodeEntities( STRING )\n```\n\nThis function decodes all the standard XML entities back into their original characters.  This includes ampersand (`&`), left-angle-bracket (`<`), right-angle-bracket (`>`), single-quote (`'`) and double-quote (`\"`).  It is used when parsing XML element and attribute values.  Example:\n\n```javascript\n\tvar text = '&lt;Hello&gt;&quot;&amp;&quot;&lt;There&gt;';\n\tconsole.log( XML.decodeEntities(text) );\n\t// Would output: <Hello>\"&\"<There>\n```\n\n### alwaysArray\n\n```\n\tARRAY alwaysArray( MIXED )\n```\n\nThis function will wrap anything passed to it into an array and return the array, unless the item passed is already an array, in which case it is simply returned verbatim.\n\n```javascript\n\tvar arr = XML.alwaysArray( maybe_array );\n```\n\n### hashKeysToArray\n\n```\n\tARRAY hashKeysToArray( OBJECT )\n```\n\nThis function returns all the hash keys as an array.  Useful for sorting and then iterating over the sorted list.\n\n```javascript\n\tvar my_hash = { foo: \"bar\", baz: 12345 };\n\tvar keys = XML.hashKeysToArray( my_hash ).sort();\n\t\n\tfor (var idx = 0, len = keys.length; idx < len; idx++) {\n\t\tvar key = keys[idx];\n\t\t// do something with key and my_hash[key]\n\t}\n```\n\n### isaHash\n\n```\n\tBOOLEAN isaHash( MIXED )\n```\n\nThis function returns `true` if the provided argument is a hash (object), `false` otherwise.\n\n```javascript\n\tvar my_hash = { foo: \"bar\", baz: 12345 };\n\tvar is_hash = XML.isaHash( my_hash );\n```\n\n### isaArray\n\n```\n\tBOOLEAN isaArray( MIXED )\n```\n\nThis function returns `true` if the provided argument is an array (or is array-like), `false` otherwise.\n\n```javascript\n\tvar my_arr = [ \"foo\", \"bar\", 12345 ];\n\tvar is_arr = XML.isaArray( my_arr );\n```\n\n### numKeys\n\n```\n\tINTEGER numKeys( OBJECT )\n```\n\nThis function returns the number of keys in the specified hash.\n\n```javascript\n\tvar my_hash = { foo: \"bar\", baz: 12345 };\n\tvar num = XML.numKeys( my_hash ); // 2\n```\n\n### firstKey\n\n```\n\tSTRING firstKey( OBJECT )\n```\n\nThis function returns the first key of the hash when iterating over it.  Note that hash keys are stored in an undefined order.\n\n```javascript\n\tvar my_hash = { foo: \"bar\", baz: 12345 };\n\tvar key = XML.firstKey( my_hash ); // foo or baz\n```\n\n# Known Issues\n\n* Serialized XML doesn't exactly match parsed XML.\n* Unicode XML entities are not decoded when parsed.\n\n# License\n\nCopyright (c) 2004 - 2015 Joseph Huckaby\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "pixl-xml@1.0.3",
  "dist": {
    "shasum": "bccbe26c80c6898ed89a5db585677c024931c9b7"
  },
  "_from": "pixl-xml@",
  "_resolved": "https://registry.npmjs.org/pixl-xml/-/pixl-xml-1.0.3.tgz"
}
